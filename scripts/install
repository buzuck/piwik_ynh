#!/bin/bash

# Retrieve arguments
domain=$1
path=$2
admin=$3
geoip_plugin=$4
log_analyse=$5


# Check if admin exists
sudo yunohost user list --json | grep -q "\"username\": \"$admin\""
if [[ ! $? -eq 0 ]]; then
    echo "Wrong admin"
    exit 1
fi

# Check domain/path availability
sudo yunohost app checkurl $domain$path -a piwik
if [[ ! $? -eq 0 ]]; then
    exit 1
fi

# Add settings to YunoHost
sudo yunohost app setting piwik admin -v $admin
sudo yunohost app setting piwik domain -v $domain
sudo yunohost app setting piwik geoip_plugin -v $geoip_plugin
sudo yunohost app setting piwik log_analyse -v $log_analyse
sudo yunohost app setting piwik hide -v $hide


# Generate random password
db_pwd=$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d 'A-Za-z0-9' | sed -n 's/\(.\{24\}\).*/\1/p')

# Use 'pwik' as database name and user
db_user=piwik
db_name=$db_user

# Initialize database and store mysql password for upgrade
sudo yunohost app initdb $db_name -p $db_pwd
sudo yunohost app setting piwik db_user -v $db_user
sudo yunohost app setting piwik mysqlpwd -v $db_pwd
# And restrict access to the admin
sudo yunohost app addaccess piwik -u $admin


# Change variables in nginx configuration
final_path=/var/www/piwik
sudo sed -i "s@PATHTOCHANGE@$path@g" ../conf/nginx.conf
sudo sed -i "s@ALIASTOCHANGE@$final_path/@g" ../conf/nginx.conf
sudo sed -i "s@NAMETOCHANGE@piwik@g" ../conf/nginx.conf
sudo sed -i "s@IPTOCHANGE@$(hostname --ip-address)@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/piwik.conf
# Reload Nginx
sudo systemctl reload nginx

# Tarball got from http://builds.piwik.org/piwik.tar.gz
# Copy files to right place
tar -xf ../sources/piwik.tar.gz

# Finally, move piwik's files
sudo mv piwik $final_path

# Set right permissions for curl install
sudo chown -R www-data: $final_path

# Modify php-fpm pool configuration and copy it to php-fpm pool directory for piwik
finalphpconf=/etc/php5/fpm/pool.d/piwik.conf
finalphpini=/etc/php5/fpm/conf.d/20-piwik.ini
sed -i "s@__NAMETOCHANGE__@piwik@g" ../conf/php-fpm.conf
sed -i "s@__FINALPATH__@$final_path@g" ../conf/php-fpm.conf
sed -i "s@__FINALPATH__@$final_path@g" ../conf/php-fpm.ini
sudo cp ../conf/php-fpm.conf $finalphpconf
sudo cp ../conf/php-fpm.ini $finalphpini
sudo chown root: $finalphpconf
sudo chown root: $finalphpini
sudo systemctl reload php5-fpm.service

# Give local access to piwik
localpath=$domain$path/local_alias
sudo yunohost app setting piwik skipped_uris -v "/local_alias"
sudo yunohost app ssowatconf


# Install with curl
echo "Curl : setup database"
timezone=$(cat /etc/timezone)
# Paranoid : Generate a random security prefix (against SQL injections)
# TODO # VERY paranoid : randomize the length of the prefix :D Because
# we are using a fixed length string, containing well known characters.
prefix="$(dd if=/dev/urandom bs=1 count=200 2> /dev/null | tr -c -d 'A-Za-z0-9' | sed -n 's/\(.\{10\}\).*/\1/p')_piwik_"
curl -kL -d host="localhost" -d username="$db_user" -d password="$db_pwd" -d dbname="$db_name" -d tables_prefix=$prefix -d adapter="PDO\\MYSQL" "https://$localpath/index.php?action=databaseSetup&trackerStatus=500&clientProtocol=https" > /dev/null

echo "Curl : create super user"
curl -kL -d login="adminP" -d password="$db_pwd" -d password_bis="$db_pwd" -d email="email@domain.tld" -d subscribe_newsletter_piwikorg="0" -d subscribe_newsletter_piwikpro="0" "https://$localpath/index.php?action=setupSuperUser&trackerStatus=500&clientProtocol=https&module=Installation" > /dev/null

echo "Curl : adding the given site"
curl -kL -d siteName="$domain" -d url="https://$domain" -d timezone="$timezone" -d ecommerce="0" "https://$localpath/index.php?action=firstWebsiteSetup&trackerStatus=500&clientProtocol=https&module=Installation" > /dev/null

# Change variables in piwik configuration
salt=$(grep salt $final_path/config/config.ini.php | cut -d "\"" -f 2)
sed -i "s@__DBUSER__@$db_user@g" ../sources/additions/config/config.ini.php
sed -i "s@__DBPWD__@$db_pwd@g"   ../sources/additions/config/config.ini.php
sed -i "s@__SALT__@$salt@g"      ../sources/additions/config/config.ini.php
sed -i "s@__DOMAIN__@$domain@g"  ../sources/additions/config/config.ini.php
sed -i "s@__PREFIX__@$prefix@g"  ../sources/additions/config/config.ini.php

# Copy additionnal files to right place
sudo cp -a ../sources/additions/* $final_path
sudo chown -R www-data: $final_path

# Fetch php5-cli, needed to do cli calls, for LDAP plugin
sudo apt-get install php5-cli -qy

# Creating the admin user
sudo "$final_path/console" loginldap:synchronize-users --login="$admin"

# After the installation of the LDAP plugin, force update
sudo "$final_path/console" core:update --yes
# Directly give admin rights to the designed admin user.
mysql -h localhost -u $db_user -p$db_pwd -s $db_user -e "UPDATE "$db_name"."$prefix"user SET superuser_access = '1' WHERE "$prefix"user.login = \"$admin\""

# Deleting 'adminP', now uneeded
mysql -h localhost -u $db_user -p$db_pwd -s $db_user -e "DELETE FROM "$db_name"."$prefix"user WHERE "$prefix"user.login = 'adminP'"

# Mysql's piwik user is given some more rigths : LOAD DATA INFILE
mysql -h localhost -u root -p$(sudo cat /etc/yunohost/mysql) -s $db_name -e "GRANT FILE on *.* to $db_user@localhost"
sudo chmod +x -R $final_path/tmp/assets/
sudo systemctl restart mysql


if [ "$geoip_plugin" = "Yes" ] || [ "$geoip_plugin" = "yes" ] || [ "$geoip_plugin" = "YES" ] || [ "$geoip_plugin" = "Y" ] || [ "$geoip_plugin" = "y" ]
then
    # GeoIP with PECL configuration
    sudo apt-get install php5-geoip php5-dev libgeoip-dev php-pear -qy
    sudo pecl install geoip

    # Get the GeoIP DB
    curl -O http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
    gunzip GeoLiteCity.dat.gz
    sudo mv GeoLiteCity.dat $final_path/misc/GeoIPCity.dat
    # Manually update the DB to configure geoip
    mysql -h localhost -u $db_user -p$db_pwd -s $db_user -e "INSERT INTO "$db_name"."$prefix"option (\`option_name\`, \`option_value\`, \`autoload\`) VALUES ('geoip.loc_db_url', 'http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz', 0), ('geoip.updater_period', 'month', 0), ('TaskScheduler.timetable', 'a:1:{s:49:\"Piwik\\Plugins\\UserCountry\\GeoIPAutoUpdater.update\";i:1459900830;}', 0), ('usercountry.location_provider', 'geoip_pecl', 0);"

    # Update piwik's php.ini
    sudo sed -i "s@;@@g" $finalphpini
    sudo systemctl reload php5-fpm.service
fi

#if [ "$log_analyse" = "Yes" ] || [ "$log_analyse" = "yes" ] || [ "$log_analyse" = "YES" ] || [ "$log_analyse" = "Y" ] || [ "$log_analyse" = "y" ]
#then
    # Mise en place d'une tâche cron  sur www-data pour l'analyse de log nginx
#    sed -i "s@__FINALPATH__@$final_path@g" ../conf/cron_piwik_loganalytics
#    sudo cp ../conf/cron_piwik_loganalytics /etc/cron.d/piwik_loganalytics

    # Analyse des logs nginx juste avant la rotation chaque semaine.
#    sudo sed -i "/prerotate$/ a\\\t\tsu -l www-data -c \"/bin/bash \'$final_path/misc/log-analytics/manage_import.sh\' > \'$final_path/misc/log-analytics/lastlog_loganalytics_cron.log\' 2>&1\"" /etc/logrotate.d/nginx
    # Ajoute l'appel du script après (=a\) la ligne se terminant (=$) par prerotate et le précède de 2 tabulation (=\\t\t). Le script est exécuté par www-data pour éviter des risques en cas de compromission du script.
#fi


# Files owned by www-data, for upgrade
sudo chmod 644 -R $final_path
# Some file need execution rights
xargs -a ../conf/Liste_exec -I{} sudo chmod 554 "$final_path/{}"
sudo find $final_path -type d -print0 | xargs -0 sudo chmod 755 # (rwxr-xr-x)
sudo chown -R www-data:root $final_path

#if [ "$log_analyse" = "Yes" ] || [ "$log_analyse" = "yes" ] || [ "$log_analyse" = "YES" ] || [ "$log_analyse" = "Y" ] || [ "$log_analyse" = "y" ]
#then
    # Programme la première analyse de log
#    sed -i "s@__FINALPATH__@$final_path@g" ../conf/cron_piwik_loganalytics_first
#    sudo cp ../conf/cron_piwik_loganalytics_first /etc/cron.d/piwik_loganalytics_first
#fi
